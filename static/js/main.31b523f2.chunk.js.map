{"version":3,"sources":["components/AppHeader/AppHeader.js","context/locationsContext.js","containers/AutoCompleteInput/AutoCompleteInput.js","components/FormGroup/FormGroup.js","components/Message/Message.js","components/SearchForm/SearchForm.js","config/utilities.js","components/MapDisplay/MapDisplay.js","config/constants.js","config/endpoints.js","http-client/httpClient.js","containers/NavigationPage/NavigationPage.js","components/AppFooter/AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","react_default","a","createElement","LocationsContext","React","createContext","updateLocation","resetPending","resetComplete","AutoCompleteInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlePlaceChanged","place","autocomplete","getPlace","geometry","context","inputId","location","setState","isDirty","resetField","autocompleteInput","current","value","createRef","state","window","google","maps","places","Autocomplete","types","addListener","Fragment","type","ref","className","id","placeholder","onClick","Component","contextType","FormGroup","htmlFor","label","containers_AutoCompleteInput_AutoCompleteInput","Message","message","messageType","SearchForm","resetForm","myFormRef","reset","handleReset","getBtnLabel","isLoading","_this2","onSubmit","handleSubmit","el","components_FormGroup_FormGroup","components_Message_Message","disabled","getLocationOnMap","lat","lng","LatLng","MapDisplay","showDefaultPosition","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","map","Map","mapWrapper","center","zoom","mapTypeId","diaplayRoute","setMap","middlePoints","toConsumableArray","route","origin","shift","destination","pop","wayPointsRoute","middlePt","stopover","waypoints","optimizeWaypoints","travelMode","response","status","setDirections","alert","resetMap","prevProps","showRoute","RETRY_COUNTER","DEFAULT_APP_STATE","start","drop","mapLoaded","retryCounter","ERROR_MESSAGES","serviceError","uiValidationError","appNotLoaded","retryFailure","API_STATUS","success","progress","failure","URLS","submit","getRoute","API","axios","create","baseURL","requestGenerator","getReq","endpoint","get","postReq","payload","post","NavigationPage","handleChange","key","defineProperty","getCords","obj","checkForUnsuccessfulMsg","data","error","setMessageInState","msg","msgType","arguments","length","undefined","makeRequestForRoute","then","result","prevState","unsuccessfulMsg","_result$data","total_distance","total_time","path","catch","makeRequestForToken","token","replace","event","preventDefault","_this$state","JSON","parse","stringify","resetDone","objectSpread","initMap","gmapsURL","GOOGLE_MAP_API","loadJS","concat","locationsContext","Provider","components_SearchForm_SearchForm","assign","components_MapDisplay_MapDisplay","AppFooter","App","components_AppHeader_AppHeader","containers_NavigationPage_NavigationPage","components_AppFooter_AppFooter","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31b523f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AppHeader.css';\r\n\r\n/**\r\n * The application header\r\n */\r\nconst AppHeader = () => {\r\n  return <header>React Navigation App</header>;\r\n};\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\n\r\nconst LocationsContext = React.createContext({\r\n  updateLocation: () => {},\r\n  resetPending: false,\r\n  resetComplete: () => {}\r\n});\r\n\r\nexport default LocationsContext;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LocationsContext from '../../context/locationsContext';\r\nimport './AutoCompleteInput.css';\r\n\r\n/**\r\n * A re-usable component that returns a input field that is bound with Google maps API\r\n */\r\nclass AutoCompleteInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.autocompleteInput = React.createRef();\r\n    this.autocomplete = null;\r\n    this.state = {\r\n      isDirty: false\r\n    };\r\n  }\r\n\r\n  static contextType = LocationsContext;\r\n\r\n  /**\r\n     * @name handlePlaceChanged\r\n     * @description This method to be execued when customer keys in input in text fields\r\n     */\r\n  handlePlaceChanged = () => {\r\n    const place = this.autocomplete.getPlace();\r\n    if (place && place.geometry) {\r\n      this.context.updateLocation(this.props.inputId, place.geometry.location);\r\n      this.setState({\r\n        isDirty: true\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n     * @name resetField\r\n     * @description This method to be execued on click of cross button\r\n     */\r\n  resetField = () => {\r\n    this.autocompleteInput.current.value = '';\r\n    this.context.updateLocation(this.props.inputId, '');\r\n    this.setState({\r\n      isDirty: false\r\n    });\r\n  };\r\n\r\n  /**\r\n * @name componentDidUpdate\r\n * @description React component lifecycle hook\r\n */\r\n  componentDidUpdate() {\r\n    if (this.context.resetPending) {\r\n      this.resetField();\r\n      this.context.resetComplete();\r\n    }\r\n  }\r\n\r\n  /**\r\n * @name componentDidMount\r\n * @description React component lifecycle hook\r\n */\r\n  componentDidMount() {\r\n    this.autocomplete = new window.google.maps.places.Autocomplete(\r\n      this.autocompleteInput.current,\r\n      { types: ['geocode'] }\r\n    );\r\n    this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <input\r\n          type=\"text\"\r\n          ref={this.autocompleteInput}\r\n          className=\"form-control autocomplete-input\"\r\n          id={this.props.inputId}\r\n          placeholder=\"Enter a location\"\r\n        />\r\n        {this.state.isDirty && (\r\n          <span className=\"cross-icon\" onClick={this.resetField}>\r\n            X\r\n          </span>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nAutoCompleteInput.propTypes = {\r\n  inputId: PropTypes.string\r\n};\r\n\r\nexport default AutoCompleteInput;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AutoCompleteInput from '../../containers/AutoCompleteInput/AutoCompleteInput';\r\n\r\n/**\r\n * A re-usable comonent that returns a combination of label and an input field \r\n * collectively called form group\r\n */\r\nconst FormGroup = props => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={props.inputId}>{props.label}</label>\r\n      <AutoCompleteInput inputId={props.inputId} />\r\n    </div>\r\n  );\r\n};\r\n\r\nFormGroup.propTypes = {\r\n  inputId: PropTypes.string,\r\n  label: PropTypes.string\r\n};\r\n\r\nexport default FormGroup;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Message.css';\r\n\r\n/**\r\n * A re-usable component that displays the message it receives with approopriate styling \r\n * based on the message type\r\n */\r\nconst Message = props => {\r\n  const { message, messageType } = props;\r\n  return message ? (\r\n    <p\r\n      className={\r\n        'message-container ' + (messageType === 'error' ? 'error' : '')\r\n      }\r\n    >\r\n      {message}\r\n    </p>\r\n  ) : null;\r\n};\r\n\r\nMessage.propTypes = {\r\n  message: PropTypes.string,\r\n  messageType: PropTypes.string\r\n};\r\n\r\nexport default Message;\r\n","import React, { Component } from 'react';\r\nimport './SearchForm.css';\r\nimport PropTypes from 'prop-types';\r\nimport FormGroup from '../FormGroup/FormGroup';\r\nimport Message from '../Message/Message';\r\n\r\n/**\r\n * The Left panel of the application that contains the search form.\r\n */\r\nclass SearchForm extends Component {\r\n  /**\r\n * @name resetForm\r\n * @description This method resets form state\r\n */\r\n  resetForm = () => {\r\n    this.myFormRef.reset();\r\n    this.props.handleReset();\r\n  };\r\n\r\n  /**\r\n     * @name getBtnLabel\r\n     * @description This method returns the label to be displayed on submit button, by default its Submit,\r\n     * once form submitted, it will be Re-Submit and during API request it will be Loading...\r\n     */\r\n  getBtnLabel = () => {\r\n    if (this.props.isLoading) {\r\n      return 'Loading...';\r\n    } else if (this.props.isDirty) {\r\n      return 'Re-Submit';\r\n    } else {\r\n      return 'Submit';\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-xs-12 col-md-4 left-panel\">\r\n        <form\r\n          onSubmit={this.props.handleSubmit}\r\n          ref={el => (this.myFormRef = el)}\r\n        >\r\n          <FormGroup inputId=\"start\" label=\"Starting location\" />\r\n          <FormGroup inputId=\"drop\" label=\"Drop-off point\" />\r\n          <Message\r\n            message={this.props.message}\r\n            messageType={this.props.messageType}\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary lp-btn\"\r\n            disabled={this.props.isLoading}\r\n            onClick={this.props.handleSubmit}\r\n          >\r\n            {this.getBtnLabel()}\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary lp-btn\"\r\n            onClick={this.resetForm}\r\n          >\r\n            Reset\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSearchForm.propTypes = {\r\n  message: PropTypes.string,\r\n  messageType: PropTypes.string,\r\n  isLoading: PropTypes.bool,\r\n  isDirty: PropTypes.bool,\r\n  handleSubmit: PropTypes.func,\r\n  handleReset: PropTypes.func\r\n};\r\n\r\nexport default SearchForm;\r\n","export const getLocationOnMap = (lat, lng) => new window.google.maps.LatLng(lat, lng)","import React, { Component } from 'react';\r\nimport './MapDisplay.css';\r\nimport PropTypes from 'prop-types';\r\nimport { getLocationOnMap } from '../../config/utilities';\r\n\r\n/**\r\n * The Right halve of main page that displays the map with route based on search result.\r\n */\r\nclass MapDisplay extends Component {\r\n  /**\r\n * @name showDefaultPosition\r\n * @description This method shows default position on map when the app load\r\n */\r\n  showDefaultPosition = () => {\r\n    this.directionsService = new window.google.maps.DirectionsService();\r\n    this.directionsDisplay = new window.google.maps.DirectionsRenderer();\r\n    this.map = new window.google.maps.Map(this.mapWrapper, {\r\n      center: {\r\n        lat: 51.509865,\r\n        lng: -0.118092\r\n      },\r\n      zoom: 12,\r\n      mapTypeId: 'roadmap'\r\n    });\r\n  };\r\n\r\n  /**\r\n * @name diaplayRoute\r\n * @description This method displays the route on map once search request is successful\r\n */\r\n  diaplayRoute = () => {\r\n    this.directionsDisplay.setMap(this.map);\r\n    const middlePoints = [...this.props.route];\r\n    const origin = middlePoints.shift();\r\n    const destination = middlePoints.pop();\r\n    const wayPointsRoute = middlePoints.map(middlePt => {\r\n      return {\r\n        location: getLocationOnMap(middlePt[0], middlePt[1]),\r\n        stopover: true\r\n      };\r\n    });\r\n    this.directionsService.route(\r\n      {\r\n        origin: getLocationOnMap(origin[0], origin[1]),\r\n        destination: getLocationOnMap(destination[0], destination[1]),\r\n        waypoints: wayPointsRoute,\r\n        optimizeWaypoints: true,\r\n        travelMode: 'DRIVING'\r\n      },\r\n      (response, status) => {\r\n        if (status === 'OK') {\r\n          this.directionsDisplay.setDirections(response);\r\n        } else {\r\n          window.alert('Directions request failed with status: ' + status);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  /**\r\n * @name resetMap\r\n * @description This method removes the previously displayed route from map\r\n */\r\n  resetMap = () => {\r\n    this.directionsDisplay.setMap(null);\r\n  };\r\n\r\n  /**\r\n * @name componentDidUpdate\r\n * @description React component lifecycle hook\r\n */\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.showRoute) {\r\n      this.diaplayRoute();\r\n    } else {\r\n      this.resetMap();\r\n    }\r\n  }\r\n\r\n  /**\r\n * @name componentDidMount\r\n * @description React component lifecycle hook\r\n */\r\n  componentDidMount() {\r\n    this.showDefaultPosition();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-xs-12 col-md-8\">\r\n        <div id=\"googleMap\" ref={el => (this.mapWrapper = el)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMapDisplay.propTypes = {\r\n  showRoute: PropTypes.bool,\r\n  route: PropTypes.array\r\n};\r\n\r\nexport default MapDisplay;\r\n","const GOOGLE_MAP_API = 'https://maps.googleapis.com/maps/api/js?key=';\r\n\r\nexport const getApiUrl = () =>\r\n  process.env.REACT_APP_GOOGLE_API_KEY\r\n    ? GOOGLE_MAP_API + process.env.REACT_APP_GOOGLE_API_KEY\r\n    : null;\r\n\r\nexport const RETRY_COUNTER = 1;\r\n\r\nexport const DEFAULT_APP_STATE = {\r\n  start: '',\r\n  drop: '',\r\n  message: '',\r\n  messageType: '',\r\n  mapLoaded: false,\r\n  resetPending: false,\r\n  showRoute: false,\r\n  route: null,\r\n  isLoading: false,\r\n  isDirty: false,\r\n  retryCounter: RETRY_COUNTER\r\n};\r\n\r\nexport const ERROR_MESSAGES = {\r\n  serviceError: 'Something went wrong! Please try again in some time.',\r\n  uiValidationError: 'Both starting location and drop-off point are mandatory!',\r\n  appNotLoaded:\r\n    'Failed to load app. Please make sure Google maps API key is added in .env file.',\r\n  retryFailure:\r\n    'Server did not respond even on retry. Please try again in some time'\r\n};\r\n\r\nexport const IN_PROGRESS_STATUS = 'in progress';\r\nexport const API_STATUS = {\r\n  success: 'success',\r\n  progress: 'in progress',\r\n  failure: 'failure'\r\n};\r\n","export const baseURL = `https://mock-api.dev.lalamove.com`;\r\n\r\nexport const URLS = {\r\n  submit: 'route',\r\n  getRoute: 'route/{token}'\r\n};\r\n","import axios from 'axios';\r\nimport { baseURL } from '../config/endpoints';\r\n\r\nexport const API = axios.create({\r\n  baseURL: baseURL\r\n});\r\n\r\nconst requestGenerator = {\r\n  getReq: endpoint => API.get(endpoint),\r\n  postReq: (endpoint, payload) => API.post(endpoint, payload)\r\n};\r\n\r\nexport default requestGenerator;\r\n","import React, { Component } from 'react';\r\nimport './NavigationPage.css';\r\nimport SearchForm from '../../components/SearchForm/SearchForm';\r\nimport MapDisplay from '../../components/MapDisplay/MapDisplay';\r\nimport LocationsContext from '../../context/locationsContext';\r\nimport {\r\n  getApiUrl,\r\n  DEFAULT_APP_STATE,\r\n  ERROR_MESSAGES,\r\n  API_STATUS,\r\n  RETRY_COUNTER\r\n} from '../../config/constants';\r\nimport requestGenerator from '../../http-client/httpClient';\r\nimport { URLS } from '../../config/endpoints';\r\n\r\n/**\r\n * The application body, internally split into 2 halves: SearchForm and MapDisplay respectively.\r\n */\r\nclass NavigationPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { ...DEFAULT_APP_STATE };\r\n  }\r\n\r\n  /**\r\n     * @name handleChange\r\n     * @description This method updates the state based on params\r\n     * @param key Key in state that needs to be updated\r\n     * @param value Value for the key in state that needs to be updated\r\n     */\r\n  handleChange = (key, value) => {\r\n    this.setState({\r\n      [key]: value\r\n    });\r\n  };\r\n\r\n  /**\r\n     * @name getCords\r\n     * @description This method returns latitude and longitude in array from the object\r\n     * @param obj Object that contains keys lat and lng\r\n     */\r\n  getCords = obj => [obj.lat, obj.lng];\r\n\r\n  /**\r\n     * @name checkForUnsuccessfulMsg\r\n     * @description This method checks if service responds with unsuccessful message\r\n     * @param response the search response\r\n     */\r\n  checkForUnsuccessfulMsg = response => {\r\n    switch (response.data.status) {\r\n      case API_STATUS.success:\r\n        return '';\r\n      case API_STATUS.failure:\r\n        return response.data.error;\r\n      case API_STATUS.progress:\r\n        return ERROR_MESSAGES.retryFailure;\r\n      default:\r\n        return response.data.status;\r\n    }\r\n  };\r\n\r\n  /**\r\n     * @name setMessageInState\r\n     * @description This method updates the message and messageType properties in state\r\n     * @param msg Message to be displayed\r\n     * @param msgType Type of message\r\n     */\r\n  setMessageInState = (msg, msgType = '') => {\r\n    this.setState({\r\n      message: msg,\r\n      messageType: msgType,\r\n      isLoading: false,\r\n      isDirty: true\r\n    });\r\n  };\r\n\r\n  /**\r\n     * @name makeRequestForRoute\r\n     * @description This method makes a request for route based on the endpoint it receives and retries\r\n     *  when server returns in progress status\r\n     * @param endpoint the search endpoint\r\n     */\r\n  makeRequestForRoute = endpoint => {\r\n    requestGenerator\r\n      .getReq(endpoint)\r\n      .then(result => {\r\n        if (\r\n          result.data.status === API_STATUS.progress &&\r\n          this.state.retryCounter > 0\r\n        ) {\r\n          this.setState(prevState => ({\r\n            retryCounter: prevState.retryCounter - 1\r\n          }));\r\n          return this.makeRequestForRoute(endpoint);\r\n        }\r\n        const unsuccessfulMsg = this.checkForUnsuccessfulMsg(result);\r\n        if (unsuccessfulMsg) {\r\n          this.setMessageInState(unsuccessfulMsg, 'error');\r\n        } else {\r\n          const { total_distance, total_time } = result.data;\r\n          this.setMessageInState(\r\n            'total distance: ' + total_distance + ' \\ntotal time: ' + total_time\r\n          );\r\n          this.setState({\r\n            showRoute: true,\r\n            route: result.data.path\r\n          });\r\n        }\r\n      })\r\n      .catch(response => {\r\n        this.setMessageInState(ERROR_MESSAGES.serviceError, 'error');\r\n      });\r\n  };\r\n\r\n  /**\r\n     * @name makeRequestForToken\r\n     * @description This method makes a request for token\r\n     * @param origin the origin location\r\n     * @param destination the drop-of location\r\n     */\r\n  makeRequestForToken = (origin, destination) => {\r\n    requestGenerator\r\n      .postReq(URLS.submit, { origin, destination })\r\n      .then(result => {\r\n        const token = result && (result.data && result.data.token);\r\n        const endpoint = URLS.getRoute.replace('{token}', token);\r\n        this.makeRequestForRoute(endpoint);\r\n      })\r\n      .catch(response => {\r\n        this.setMessageInState(ERROR_MESSAGES.serviceError, 'error');\r\n      });\r\n  };\r\n\r\n  /**\r\n     * @name handleSubmit\r\n     * @description This method executes on form submit\r\n     * @param event form submit event\r\n     */\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      isLoading: true,\r\n      message: '',\r\n      messageType: '',\r\n      showRoute: false,\r\n      route: null,\r\n      retryCounter: RETRY_COUNTER\r\n    });\r\n    const { start, drop } = this.state;\r\n    if (start && drop) {\r\n      const origin = this.getCords(JSON.parse(JSON.stringify(start))),\r\n        destination = this.getCords(JSON.parse(JSON.stringify(drop)));\r\n      this.makeRequestForToken(origin, destination);\r\n    } else {\r\n      this.setMessageInState(ERROR_MESSAGES.uiValidationError, 'error');\r\n    }\r\n  };\r\n\r\n  /**\r\n     * @name resetDone\r\n     * @description This method marks the reset flag to false when all fields have got reset\r\n     */\r\n  resetDone = () => {\r\n    this.setState({ resetPending: false });\r\n  };\r\n\r\n  /**\r\n     * @name handleReset\r\n     * @description This method executes on reset button click\r\n     * @param event button click synthetic event\r\n     */\r\n  handleReset = event => {\r\n    this.setState({\r\n      ...DEFAULT_APP_STATE,\r\n      resetPending: true,\r\n      mapLoaded: true\r\n    });\r\n  };\r\n\r\n  /**\r\n     * @name initMap\r\n     * @description This method executes when app successfully loads Google maps\r\n     */\r\n  initMap = () => {\r\n    this.setState({ mapLoaded: true });\r\n  };\r\n\r\n  /**\r\n * @name componentDidMount\r\n * @description React component lifecycle hook\r\n */\r\n  componentDidMount() {\r\n    window.initMap = this.initMap;\r\n    const gmapsURL = getApiUrl();\r\n    if (gmapsURL) {\r\n      window.loadJS(`${gmapsURL}&libraries=places&callback=initMap`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-body-container\">\r\n        {this.state.mapLoaded ? (\r\n          <div className=\"row\">\r\n            <LocationsContext.Provider\r\n              value={{\r\n                updateLocation: this.handleChange,\r\n                resetPending: this.state.resetPending,\r\n                resetComplete: this.resetDone\r\n              }}\r\n            >\r\n              <SearchForm\r\n                handleSubmit={this.handleSubmit}\r\n                handleReset={this.handleReset}\r\n                {...this.state}\r\n              />\r\n            </LocationsContext.Provider>\r\n            <MapDisplay\r\n              showRoute={this.state.showRoute}\r\n              route={this.state.route}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <h1 className=\"error\">{ERROR_MESSAGES.appNotLoaded}</h1>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavigationPage;\r\n","import React from 'react';\r\nimport './AppFooter.css';\r\n\r\n/**\r\n * The application footer\r\n */\r\nconst AppFooter = () => {\r\n  return <footer>Designed and Coded by Vishal Gulati - &copy; 2019</footer>;\r\n};\r\n\r\nexport default AppFooter;\r\n","import React from 'react';\nimport './App.css';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport NavigationPage from './containers/NavigationPage/NavigationPage';\nimport AppFooter from './components/AppFooter/AppFooter';\n\n/**\n * The container component that wraps around whole application. It imports header, body and footer\n * of the application and includes them in the DOM.\n */\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <NavigationPage />\n      <AppFooter />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}