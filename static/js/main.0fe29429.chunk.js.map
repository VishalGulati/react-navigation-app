{"version":3,"sources":["components/AppHeader/AppHeader.js","context/LocationsContext.js","containers/AutoCompleteInput/AutoCompleteInput.js","components/FormGroup/FormGroup.js","components/Message/Message.js","components/LeftPanel/LeftPanel.js","config/utilities.js","components/RightPanel/RightPanel.js","config/endpoints.js","axios/AxiosLauncher.js","containers/AppBody/AppBody.js","config/constants.js","components/AppFooter/AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","react_default","a","createElement","LocationsContext","React","createContext","mapLoaded","updateLocation","AutoCompleteInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlePlaceChanged","place","autocomplete","getPlace","context","inputId","geometry","location","setState","isDirty","resetField","autocompleteInput","current","value","createRef","state","window","google","maps","places","Autocomplete","types","addListener","resetPending","Fragment","type","ref","className","id","placeholder","onClick","Component","contextType","FormGroup","htmlFor","label","containers_AutoCompleteInput_AutoCompleteInput","Message","message","messageType","LeftPanel","myFormRef","reset","resetDone","onSubmit","handleSubmit","el","components_FormGroup_FormGroup","components_Message_Message","disabled","submitBtnLabel","handleReset","getLocationOnMap","lat","lng","LatLng","RightPanel","showPosition","position","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","map","Map","document","getElementById","center","coords","latitude","longitude","zoom","mapTypeId","setMap","diaplayRoute","middlePoints","toConsumableArray","route","origin","shift","destination","pop","wayPointsRoute","middlePt","stopover","waypoints","optimizeWaypoints","travelMode","response","status","setDirections","prevProps","navigator","geolocation","getCurrentPosition","showRoute","URLS","submit","getRoute","API","axios","create","baseURL","AppBody","handleChange","key","defineProperty","getCords","obj","checkForUnsuccessfulMsg","data","error","setMessageInState","msg","msgType","arguments","length","undefined","makeRequestForRoute","endpoint","get","then","result","unsuccessfulMsg","_result$data","total_distance","total_time","path","catch","makeRequestForToken","post","token","replace","event","preventDefault","_this$state","start","drop","JSON","parse","stringify","initMap","loadJS","concat","GOOGLE_MAP_API","context_LocationsContext","Provider","components_LeftPanel_LeftPanel","assign","components_RightPanel_RightPanel","AppFooter","App","components_AppHeader_AppHeader","containers_AppBody_AppBody","components_AppFooter_AppFooter","Boolean","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fe29429.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AppHeader.css';\r\n\r\nconst AppHeader = () => {\r\n    return (\r\n        <header>\r\n            React Navigation App\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default AppHeader;","import React from 'react';\r\n\r\nconst LocationsContext  = React.createContext({\r\n    mapLoaded: false,\r\n    updateLocation: () => {\r\n    }\r\n});\r\n\r\nexport default LocationsContext;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LocationsContext from '../../context/LocationsContext';\r\nimport './AutoCompleteInput.css';\r\n\r\nclass AutoCompleteInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.autocompleteInput = React.createRef();\r\n        this.autocomplete = null;\r\n        this.state = {\r\n            isDirty: false\r\n        }\r\n    }\r\n\r\n    static contextType = LocationsContext;\r\n\r\n    handlePlaceChanged = () => {\r\n        const place = this.autocomplete.getPlace();\r\n        this.context.updateLocation(this.props.inputId, place.geometry.location);\r\n        this.setState({\r\n            isDirty: true\r\n        })\r\n    }\r\n\r\n    resetField = () => {\r\n        this.autocompleteInput.current.value = '';\r\n        this.context.updateLocation(this.props.inputId, '');\r\n        this.setState({\r\n            isDirty: false\r\n        })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.context.mapLoaded) {\r\n            this.autocomplete = new window.google.maps.places.Autocomplete(\r\n                this.autocompleteInput.current,\r\n                { types: [\"geocode\"] }\r\n            );\r\n            this.autocomplete.addListener(\"place_changed\", this.handlePlaceChanged);\r\n        }\r\n        if(this.context.resetPending) {\r\n            this.resetField();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <input type=\"text\"\r\n                    ref={this.autocompleteInput}\r\n                    className=\"form-control autocomplete-input\"\r\n                    id={this.props.inputId}\r\n                    placeholder=\"Enter a location\" />\r\n                {this.state.isDirty && <span className=\"cross-icon\" onClick={this.resetField}>X</span>}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nAutoCompleteInput.propTypes = {\r\n    inputId: PropTypes.string\r\n};\r\n\r\nexport default AutoCompleteInput;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AutoCompleteInput from '../../containers/AutoCompleteInput/AutoCompleteInput';\r\n\r\nconst FormGroup = (props) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={props.inputId}>{props.label}</label>\r\n            <AutoCompleteInput \r\n                className=\"form-control\" \r\n                inputId={props.inputId}\r\n                mapLoaded={props.mapLoaded} />\r\n        </div>\r\n    );\r\n}\r\n\r\nFormGroup.propTypes = {\r\n    inputId: PropTypes.string,\r\n    label: PropTypes.string,\r\n    value: PropTypes.string\r\n};\r\n\r\nexport default FormGroup;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Message.css';\r\n\r\nconst Message = (props) => {\r\n    const { message, messageType } = props;\r\n    return (\r\n        message ? <p className={messageType === 'error' ? \"text-red\" : ''}>\r\n            {message}\r\n        </p> : null\r\n    );\r\n}\r\n\r\nMessage.propTypes = {\r\n    message: PropTypes.string,\r\n    messageType: PropTypes.string\r\n};\r\n\r\nexport default Message;","import React, { Component } from 'react';\r\nimport './LeftPanel.css';\r\nimport PropTypes from 'prop-types';\r\nimport FormGroup from '../FormGroup/FormGroup';\r\nimport Message from '../Message/Message';\r\n\r\nclass LeftPanel extends Component {\r\n    componentDidUpdate() {\r\n        if (this.props.resetPending) {\r\n            this.myFormRef.reset();\r\n            this.props.resetDone();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-12 col-md-4 left-panel\">\r\n                <form onSubmit={this.props.handleSubmit} ref={(el) => this.myFormRef = el}>\r\n                    <FormGroup inputId=\"start\"\r\n                        label=\"Starting location\" />\r\n                    <FormGroup inputId=\"drop\"\r\n                        label=\"Drop-off point\" />\r\n                    <Message message={this.props.message} messageType={this.props.messageType} />\r\n                    <button type=\"button\" className=\"btn btn-primary lp-btn\"\r\n                        disabled={this.props.submitBtnLabel === 'Loading...'}\r\n                        onClick={this.props.handleSubmit}>\r\n                        {this.props.submitBtnLabel}\r\n                    </button>\r\n                    <button type=\"button\" className=\"btn btn-secondary lp-btn\" onClick={this.props.handleReset}>\r\n                        Reset\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nLeftPanel.propTypes = {\r\n    message: PropTypes.string,\r\n    messageType: PropTypes.string,\r\n    submitBtnLabel: PropTypes.string,\r\n    mapLoaded: PropTypes.bool,\r\n    handleSubmit: PropTypes.func,\r\n    handleReset: PropTypes.func\r\n};\r\n\r\nexport default LeftPanel;","export const getLocationOnMap = (lat, lng) => new window.google.maps.LatLng(lat, lng)","import React, { Component } from 'react';\r\nimport './RightPanel.css';\r\nimport PropTypes from 'prop-types';\r\nimport {getLocationOnMap} from '../../config/utilities';\r\n\r\nclass RightPanel extends Component {\r\n    showPosition = (position) => {\r\n        this.directionsService = new window.google.maps.DirectionsService();\r\n        this.directionsDisplay = new window.google.maps.DirectionsRenderer();\r\n        this.map = new window.google.maps.Map(document.getElementById('googleMap'), {\r\n            center: {\r\n                lat: position.coords.latitude,\r\n                lng: position.coords.longitude\r\n            },\r\n            zoom: 12,\r\n            mapTypeId: 'roadmap',\r\n        });\r\n        this.directionsDisplay.setMap(this.map);\r\n    }\r\n\r\n    diaplayRoute = () => {\r\n        const middlePoints = [...this.props.route];\r\n        const origin = middlePoints.shift();\r\n        const destination = middlePoints.pop();\r\n        const wayPointsRoute = middlePoints.map((middlePt) => {\r\n            return {\r\n                location: getLocationOnMap(middlePt[0], middlePt[1]),\r\n                stopover: true\r\n            }\r\n        })\r\n        this.directionsService.route({\r\n            origin: getLocationOnMap(origin[0], origin[1]),\r\n            destination: getLocationOnMap(destination[0], destination[1]),\r\n            waypoints: wayPointsRoute,\r\n            optimizeWaypoints: true,\r\n            travelMode: 'DRIVING'\r\n        }, (response, status) => {\r\n            if (status === 'OK') {\r\n                this.directionsDisplay.setDirections(response);\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.mapLoaded && !prevProps.mapLoaded) {\r\n            navigator.geolocation.getCurrentPosition(this.showPosition);\r\n        }\r\n        if (this.props.showRoute) {\r\n            this.diaplayRoute();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-12 col-md-8\">\r\n                <div id=\"googleMap\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nRightPanel.propTypes = {\r\n    mapLoaded: PropTypes.bool,\r\n    showRoute: PropTypes.bool,\r\n    route: PropTypes.array\r\n};\r\n\r\nexport default RightPanel;","export const baseURL = `https://mock-api.dev.lalamove.com`;\r\n\r\nexport const URLS = {\r\n    submit: 'route',\r\n    getRoute: 'route/{token}'\r\n}","import axios from 'axios';\r\nimport { baseURL } from '../config/endpoints';\r\n\r\n\r\nconst API = axios.create({\r\n    baseURL: baseURL\r\n});\r\n\r\nexport default API;","import React, { Component } from 'react';\r\nimport './AppBody.css';\r\nimport LeftPanel from '../../components/LeftPanel/LeftPanel';\r\nimport RightPanel from '../../components/RightPanel/RightPanel';\r\nimport LocationsContext from '../../context/LocationsContext';\r\nimport { GOOGLE_API_URL } from '../../config/constants';\r\nimport API from '../../axios/AxiosLauncher';\r\nimport { URLS } from '../../config/endpoints';\r\n\r\nclass AppBody extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            start: '', drop: '', message: '', messageType: '',\r\n            mapLoaded: false, resetPending: false, showRoute: false,\r\n            route: null, submitBtnLabel: 'Submit'\r\n        };\r\n    }\r\n\r\n    handleChange = (key, value) => {\r\n        this.setState({\r\n            [key]: value\r\n        });\r\n    }\r\n\r\n    getCords = (obj) => [obj.lat, obj.lng];\r\n\r\n    checkForUnsuccessfulMsg = (response) => {\r\n        switch (response.data.status) {\r\n            case 'success':\r\n                return '';\r\n            case 'failure':\r\n                return response.data.error;\r\n            default:\r\n                return response.data.status;\r\n        }\r\n    }\r\n\r\n    setMessageInState = (msg, msgType = '') => {\r\n        this.setState({\r\n            message: msg,\r\n            messageType: msgType,\r\n            submitBtnLabel: 'Re-Submit'\r\n        })\r\n    }\r\n\r\n    makeRequestForRoute = (endpoint) => {\r\n        API.get(endpoint)\r\n            .then((result) => {\r\n                if (result.data.status === 'in progress') {\r\n                    return this.makeRequestForRoute(endpoint);\r\n                }\r\n                const unsuccessfulMsg = this.checkForUnsuccessfulMsg(result);\r\n                if (unsuccessfulMsg) {\r\n                    this.setMessageInState('Server responded with: ' + unsuccessfulMsg, 'error');\r\n                } else {\r\n                    const { total_distance, total_time } = result.data\r\n                    this.setMessageInState('total distance: ' + total_distance + ' & ' +\r\n                        'total time: ' + total_time);\r\n                    this.setState({ submitBtnLabel: 'Submit', showRoute: true, route: result.data.path });\r\n                }\r\n            })\r\n            .catch((response) => {\r\n                this.setMessageInState('Something went wrong! Please try again in some time.', 'error');\r\n            });\r\n    }\r\n\r\n    makeRequestForToken = (origin, destination) => {\r\n        API.post(URLS.submit, { origin, destination })\r\n            .then((result) => {\r\n                const token = result && (result.data && result.data.token);\r\n                const endpoint = URLS.getRoute.replace(\"{token}\", token);\r\n                this.makeRequestForRoute(endpoint);\r\n            })\r\n            .catch((response) => {\r\n                this.setMessageInState('Something went wrong! Please try again in some time.', 'error');\r\n            });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.setState({ submitBtnLabel: 'Loading...', message: '', messageType: '' });\r\n        const { start, drop } = this.state;\r\n        if (start && drop) {\r\n            const origin = this.getCords(JSON.parse(JSON.stringify(this.state.start))),\r\n                destination = this.getCords(JSON.parse(JSON.stringify(this.state.drop)));\r\n            this.makeRequestForToken(origin, destination);\r\n        } else {\r\n            this.setMessageInState('Both starting point and drop-off location are mandatory!', 'error');\r\n        }\r\n    }\r\n\r\n    resetDone = () => {\r\n        this.setState({ resetPending: false });\r\n    }\r\n\r\n    handleReset = (event) => {\r\n        this.setState({ start: '', drop: '', message: '', resetPending: true, submitBtnLabel: 'Submit' });\r\n    }\r\n\r\n    initMap = () => {\r\n        this.setState({ mapLoaded: true });\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.initMap = this.initMap;\r\n        window.loadJS(`${GOOGLE_API_URL}&libraries=places&callback=initMap`)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-body-container\">\r\n                <div className=\"row\">\r\n                    <LocationsContext.Provider value={{\r\n                        mapLoaded: this.state.mapLoaded,\r\n                        updateLocation: this.handleChange,\r\n                        resetPending: this.state.resetPending\r\n                    }}>\r\n                        <LeftPanel\r\n                            handleSubmit={this.handleSubmit}\r\n                            handleReset={this.handleReset}\r\n                            resetDone={this.resetDone}\r\n                            {...this.state} />\r\n                    </LocationsContext.Provider>\r\n                    <RightPanel\r\n                        mapLoaded={this.state.mapLoaded}\r\n                        showRoute={this.state.showRoute}\r\n                        route={this.state.route} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppBody;","const GOOGLE_MAP_API = 'https://maps.googleapis.com/maps/api/js?key=';\r\n\r\nconst GOOGLE_API_KEY = 'AIzaSyD2D0r1DXCw-EMAB1xTlc4SFnsN5z7CGx4';\r\n\r\nexport const GOOGLE_API_URL = GOOGLE_MAP_API + GOOGLE_API_KEY;","\r\nimport React from 'react';\r\nimport './AppFooter.css';\r\n\r\nconst AppFooter = () => {\r\n    return (\r\n        <footer>\r\n            Designed and Coded by Vishal Gulati - &copy; 2019\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default AppFooter;","import React, { Component } from 'react';\nimport './App.css';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport AppBody from './containers/AppBody/AppBody';\nimport AppFooter from './components/AppFooter/AppFooter';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppHeader />\n        <AppBody />\n        <AppFooter />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}