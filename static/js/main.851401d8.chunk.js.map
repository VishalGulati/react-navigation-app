{"version":3,"sources":["components/AppHeader/AppHeader.js","context/LocationsContext.js","containers/AutoCompleteInput/AutoCompleteInput.js","components/FormGroup/FormGroup.js","components/Message/Message.js","components/LeftPanel/LeftPanel.js","config/utilities.js","components/RightPanel/RightPanel.js","config/constants.js","config/endpoints.js","axios/AxiosLauncher.js","containers/AppBody/AppBody.js","components/AppFooter/AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","react_default","a","createElement","LocationsContext","React","createContext","mapLoaded","updateLocation","AutoCompleteInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlePlaceChanged","place","autocomplete","getPlace","geometry","context","inputId","location","setState","isDirty","resetField","autocompleteInput","current","value","createRef","state","window","google","maps","places","Autocomplete","types","addListener","resetPending","Fragment","type","ref","className","id","placeholder","onClick","Component","contextType","FormGroup","htmlFor","label","containers_AutoCompleteInput_AutoCompleteInput","Message","message","messageType","dangerouslySetInnerHTML","__html","createMarkup","LeftPanel","myFormRef","reset","resetDone","onSubmit","handleSubmit","el","components_FormGroup_FormGroup","components_Message_Message","disabled","submitBtnLabel","handleReset","getLocationOnMap","lat","lng","LatLng","RightPanel","showDefaultPosition","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","map","Map","document","getElementById","center","zoom","mapTypeId","diaplayRoute","setMap","middlePoints","toConsumableArray","route","origin","shift","destination","pop","wayPointsRoute","middlePt","stopover","waypoints","optimizeWaypoints","travelMode","response","status","setDirections","resetMap","prevProps","showRoute","DEFAULT_APP_STATE","start","drop","URLS","submit","getRoute","API","axios","create","baseURL","requestGenerator","getReq","endpoint","get","postReq","payload","post","AppBody","handleChange","key","defineProperty","getCords","obj","checkForUnsuccessfulMsg","data","error","setMessageInState","msg","msgType","arguments","length","undefined","makeRequestForRoute","then","result","unsuccessfulMsg","_result$data","total_distance","total_time","path","catch","makeRequestForToken","token","replace","event","preventDefault","_this$state","JSON","parse","stringify","objectSpread","initMap","loadJS","concat","GOOGLE_MAP_API","context_LocationsContext","Provider","components_LeftPanel_LeftPanel","assign","components_RightPanel_RightPanel","AppFooter","App","components_AppHeader_AppHeader","containers_AppBody_AppBody","components_AppFooter_AppFooter","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.851401d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AppHeader.css';\r\n\r\n/**\r\n * The application header\r\n */\r\nconst AppHeader = () => {\r\n  return <header>React Navigation App</header>;\r\n};\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\n\r\nconst LocationsContext = React.createContext({\r\n  mapLoaded: false,\r\n  updateLocation: () => {}\r\n});\r\n\r\nexport default LocationsContext;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LocationsContext from '../../context/LocationsContext';\r\nimport './AutoCompleteInput.css';\r\n\r\n/**\r\n * A re-usable component that returns a input field that is bound with Google maps API\r\n */\r\nclass AutoCompleteInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.autocompleteInput = React.createRef();\r\n    this.autocomplete = null;\r\n    this.state = {\r\n      isDirty: false\r\n    };\r\n  }\r\n\r\n  static contextType = LocationsContext;\r\n\r\n  handlePlaceChanged = () => {\r\n    const place = this.autocomplete.getPlace();\r\n    if (place && place.geometry) {\r\n      this.context.updateLocation(this.props.inputId, place.geometry.location);\r\n      this.setState({\r\n        isDirty: true\r\n      });\r\n    }\r\n  };\r\n\r\n  resetField = () => {\r\n    this.autocompleteInput.current.value = '';\r\n    this.context.updateLocation(this.props.inputId, '');\r\n    this.setState({\r\n      isDirty: false\r\n    });\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    if (this.context.mapLoaded) {\r\n      this.autocomplete = new window.google.maps.places.Autocomplete(\r\n        this.autocompleteInput.current,\r\n        { types: ['geocode'] }\r\n      );\r\n      this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\r\n    }\r\n    if (this.context.resetPending) {\r\n      this.resetField();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <input\r\n          type=\"text\"\r\n          ref={this.autocompleteInput}\r\n          className=\"form-control autocomplete-input\"\r\n          id={this.props.inputId}\r\n          placeholder=\"Enter a location\"\r\n        />\r\n        {this.state.isDirty && (\r\n          <span className=\"cross-icon\" onClick={this.resetField}>\r\n            X\r\n          </span>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nAutoCompleteInput.propTypes = {\r\n  inputId: PropTypes.string\r\n};\r\n\r\nexport default AutoCompleteInput;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AutoCompleteInput from '../../containers/AutoCompleteInput/AutoCompleteInput';\r\n\r\n/**\r\n * A re-usable comonent that returns a combination of label and an input field \r\n * collectively called form group\r\n */\r\nconst FormGroup = props => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={props.inputId}>{props.label}</label>\r\n      <AutoCompleteInput\r\n        className=\"form-control\"\r\n        inputId={props.inputId}\r\n        mapLoaded={props.mapLoaded}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFormGroup.propTypes = {\r\n  inputId: PropTypes.string,\r\n  label: PropTypes.string,\r\n  value: PropTypes.string\r\n};\r\n\r\nexport default FormGroup;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Message.css';\r\n\r\n/**\r\n * A re-usable component that displays the message it receives with approopriate styling \r\n * based on the message type\r\n */\r\nconst Message = props => {\r\n  const { message, messageType } = props;\r\n  const createMarkup = message => {\r\n    return { __html: message };\r\n  };\r\n  return message ? (\r\n    <p\r\n      className={messageType === 'error' ? 'text-red' : ''}\r\n      dangerouslySetInnerHTML={createMarkup(message)}\r\n    />\r\n  ) : null;\r\n};\r\n\r\nMessage.propTypes = {\r\n  message: PropTypes.string,\r\n  messageType: PropTypes.string\r\n};\r\n\r\nexport default Message;\r\n","import React, { Component } from 'react';\r\nimport './LeftPanel.css';\r\nimport PropTypes from 'prop-types';\r\nimport FormGroup from '../FormGroup/FormGroup';\r\nimport Message from '../Message/Message';\r\n\r\n/**\r\n * The Left panel of the application that contains the search form.\r\n */\r\nclass LeftPanel extends Component {\r\n  componentDidUpdate() {\r\n    if (this.props.resetPending) {\r\n      this.myFormRef.reset();\r\n      this.props.resetDone();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"col-xs-12 col-md-4 left-panel\">\r\n        <form\r\n          onSubmit={this.props.handleSubmit}\r\n          ref={el => (this.myFormRef = el)}\r\n        >\r\n          <FormGroup inputId=\"start\" label=\"Starting location\" />\r\n          <FormGroup inputId=\"drop\" label=\"Drop-off point\" />\r\n          <Message\r\n            message={this.props.message}\r\n            messageType={this.props.messageType}\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary lp-btn\"\r\n            disabled={this.props.submitBtnLabel === 'Loading...'}\r\n            onClick={this.props.handleSubmit}\r\n          >\r\n            {this.props.submitBtnLabel}\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary lp-btn\"\r\n            onClick={this.props.handleReset}\r\n          >\r\n            Reset\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLeftPanel.propTypes = {\r\n  message: PropTypes.string,\r\n  messageType: PropTypes.string,\r\n  submitBtnLabel: PropTypes.string,\r\n  mapLoaded: PropTypes.bool,\r\n  handleSubmit: PropTypes.func,\r\n  handleReset: PropTypes.func\r\n};\r\n\r\nexport default LeftPanel;\r\n","export const getLocationOnMap = (lat, lng) => new window.google.maps.LatLng(lat, lng)","import React, { Component } from 'react';\r\nimport './RightPanel.css';\r\nimport PropTypes from 'prop-types';\r\nimport { getLocationOnMap } from '../../config/utilities';\r\n\r\n/**\r\n * The Right halve of main page that displays the map with route based on search result.\r\n */\r\nclass RightPanel extends Component {\r\n  showDefaultPosition = () => {\r\n    this.directionsService = new window.google.maps.DirectionsService();\r\n    this.directionsDisplay = new window.google.maps.DirectionsRenderer();\r\n    this.map = new window.google.maps.Map(\r\n      document.getElementById('googleMap'),\r\n      {\r\n        center: {\r\n          lat: 51.509865,\r\n          lng: -0.118092\r\n        },\r\n        zoom: 12,\r\n        mapTypeId: 'roadmap'\r\n      }\r\n    );\r\n  };\r\n\r\n  diaplayRoute = () => {\r\n    this.directionsDisplay.setMap(this.map);\r\n    const middlePoints = [...this.props.route];\r\n    const origin = middlePoints.shift();\r\n    const destination = middlePoints.pop();\r\n    const wayPointsRoute = middlePoints.map(middlePt => {\r\n      return {\r\n        location: getLocationOnMap(middlePt[0], middlePt[1]),\r\n        stopover: true\r\n      };\r\n    });\r\n    this.directionsService.route(\r\n      {\r\n        origin: getLocationOnMap(origin[0], origin[1]),\r\n        destination: getLocationOnMap(destination[0], destination[1]),\r\n        waypoints: wayPointsRoute,\r\n        optimizeWaypoints: true,\r\n        travelMode: 'DRIVING'\r\n      },\r\n      (response, status) => {\r\n        if (status === 'OK') {\r\n          this.directionsDisplay.setDirections(response);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  resetMap = () => {\r\n    this.directionsDisplay.setMap(null);\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.mapLoaded && !prevProps.mapLoaded) {\r\n      this.showDefaultPosition();\r\n    }\r\n    if (this.props.showRoute) {\r\n      this.diaplayRoute();\r\n    } else {\r\n      this.resetMap();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-xs-12 col-md-8\">\r\n        <div id=\"googleMap\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRightPanel.propTypes = {\r\n  mapLoaded: PropTypes.bool,\r\n  showRoute: PropTypes.bool,\r\n  route: PropTypes.array\r\n};\r\n\r\nexport default RightPanel;\r\n","const GOOGLE_MAP_API = 'https://maps.googleapis.com/maps/api/js?key=';\r\n\r\nexport const GOOGLE_API_URL =\r\n  GOOGLE_MAP_API + process.env.REACT_APP_GOOGLE_API_KEY;\r\n\r\nexport const DEFAULT_APP_STATE = {\r\n  start: '',\r\n  drop: '',\r\n  message: '',\r\n  messageType: '',\r\n  mapLoaded: false,\r\n  resetPending: false,\r\n  showRoute: false,\r\n  route: null,\r\n  submitBtnLabel: 'Submit'\r\n};\r\n","export const baseURL = `https://mock-api.dev.lalamove.com`;\r\n\r\nexport const URLS = {\r\n  submit: 'route',\r\n  getRoute: 'route/{token}'\r\n};\r\n","import axios from 'axios';\r\nimport { baseURL } from '../config/endpoints';\r\n\r\nconst API = axios.create({\r\n  baseURL: baseURL\r\n});\r\n\r\nconst requestGenerator = {\r\n  getReq: endpoint => API.get(endpoint),\r\n  postReq: (endpoint, payload) => API.post(endpoint, payload)\r\n};\r\n\r\nexport default requestGenerator;\r\n","import React, { Component } from 'react';\r\nimport './AppBody.css';\r\nimport LeftPanel from '../../components/LeftPanel/LeftPanel';\r\nimport RightPanel from '../../components/RightPanel/RightPanel';\r\nimport LocationsContext from '../../context/LocationsContext';\r\nimport { GOOGLE_API_URL, DEFAULT_APP_STATE } from '../../config/constants';\r\nimport requestGenerator from '../../axios/AxiosLauncher';\r\nimport { URLS } from '../../config/endpoints';\r\n\r\n/**\r\n * The application body, internally split into 2 halves: LeftPanel and RightPanel respectively.\r\n */\r\nclass AppBody extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { ...DEFAULT_APP_STATE };\r\n  }\r\n\r\n  handleChange = (key, value) => {\r\n    this.setState({\r\n      [key]: value\r\n    });\r\n  };\r\n\r\n  getCords = obj => [obj.lat, obj.lng];\r\n\r\n  checkForUnsuccessfulMsg = response => {\r\n    switch (response.data.status) {\r\n      case 'success':\r\n        return '';\r\n      case 'failure':\r\n        return response.data.error;\r\n      default:\r\n        return response.data.status;\r\n    }\r\n  };\r\n\r\n  setMessageInState = (msg, msgType = '') => {\r\n    this.setState({\r\n      message: msg,\r\n      messageType: msgType,\r\n      submitBtnLabel: 'Re-Submit'\r\n    });\r\n  };\r\n\r\n  makeRequestForRoute = endpoint => {\r\n    requestGenerator\r\n      .getReq(endpoint)\r\n      .then(result => {\r\n        if (result.data.status === 'in progress') {\r\n          return this.makeRequestForRoute(endpoint);\r\n        }\r\n        const unsuccessfulMsg = this.checkForUnsuccessfulMsg(result);\r\n        if (unsuccessfulMsg) {\r\n          this.setMessageInState(\r\n            'Server responded with: ' + unsuccessfulMsg,\r\n            'error'\r\n          );\r\n        } else {\r\n          const { total_distance, total_time } = result.data;\r\n          this.setMessageInState(\r\n            'total distance: ' +\r\n              total_distance +\r\n              ' <br/> total time: ' +\r\n              total_time\r\n          );\r\n          this.setState({\r\n            submitBtnLabel: 'Re-Submit',\r\n            showRoute: true,\r\n            route: result.data.path\r\n          });\r\n        }\r\n      })\r\n      .catch(response => {\r\n        this.setMessageInState(\r\n          'Something went wrong! Please try again in some time.',\r\n          'error'\r\n        );\r\n      });\r\n  };\r\n\r\n  makeRequestForToken = (origin, destination) => {\r\n    requestGenerator\r\n      .postReq(URLS.submit, { origin, destination })\r\n      .then(result => {\r\n        const token = result && (result.data && result.data.token);\r\n        const endpoint = URLS.getRoute.replace('{token}', token);\r\n        this.makeRequestForRoute(endpoint);\r\n      })\r\n      .catch(response => {\r\n        this.setMessageInState(\r\n          'Something went wrong! Please try again in some time.',\r\n          'error'\r\n        );\r\n      });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      submitBtnLabel: 'Loading...',\r\n      message: '',\r\n      messageType: '',\r\n      showRoute: false,\r\n      route: null\r\n    });\r\n    const { start, drop } = this.state;\r\n    if (start && drop) {\r\n      const origin = this.getCords(\r\n          JSON.parse(JSON.stringify(this.state.start))\r\n        ),\r\n        destination = this.getCords(\r\n          JSON.parse(JSON.stringify(this.state.drop))\r\n        );\r\n      this.makeRequestForToken(origin, destination);\r\n    } else {\r\n      this.setMessageInState(\r\n        'Both starting location and drop-off point are mandatory!',\r\n        'error'\r\n      );\r\n    }\r\n  };\r\n\r\n  resetDone = () => {\r\n    this.setState({ resetPending: false });\r\n  };\r\n\r\n  handleReset = event => {\r\n    this.setState({\r\n      ...DEFAULT_APP_STATE,\r\n      resetPending: true,\r\n      mapLoaded: true\r\n    });\r\n  };\r\n\r\n  initMap = () => {\r\n    this.setState({ mapLoaded: true });\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.initMap = this.initMap;\r\n    window.loadJS(`${GOOGLE_API_URL}&libraries=places&callback=initMap`);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-body-container\">\r\n        <div className=\"row\">\r\n          <LocationsContext.Provider\r\n            value={{\r\n              mapLoaded: this.state.mapLoaded,\r\n              updateLocation: this.handleChange,\r\n              resetPending: this.state.resetPending\r\n            }}\r\n          >\r\n            <LeftPanel\r\n              handleSubmit={this.handleSubmit}\r\n              handleReset={this.handleReset}\r\n              resetDone={this.resetDone}\r\n              {...this.state}\r\n            />\r\n          </LocationsContext.Provider>\r\n          <RightPanel\r\n            mapLoaded={this.state.mapLoaded}\r\n            showRoute={this.state.showRoute}\r\n            resetPending={this.state.resetPending}\r\n            route={this.state.route}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppBody;\r\n","import React from 'react';\r\nimport './AppFooter.css';\r\n\r\n/**\r\n * The application footer\r\n */\r\nconst AppFooter = () => {\r\n  return <footer>Designed and Coded by Vishal Gulati - &copy; 2019</footer>;\r\n};\r\n\r\nexport default AppFooter;\r\n","import React from 'react';\nimport './App.css';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport AppBody from './containers/AppBody/AppBody';\nimport AppFooter from './components/AppFooter/AppFooter';\n\n/**\n * The container component that wraps around whole application. It imports header, body and footer\n * of the application and includes them in the DOM.\n */\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <AppBody />\n      <AppFooter />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}