// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot testing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AppBody />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="row"
      >
        <Context.Provider
          value={
            Object {
              "mapLoaded": false,
              "updateLocation": [Function],
            }
          }
        >
          <LeftPanel
            drop=""
            handleReset={[Function]}
            handleSubmit={[Function]}
            mapLoaded={false}
            message=""
            messageType=""
            resetDone={[Function]}
            resetPending={false}
            route={null}
            showRoute={false}
            start=""
            submitBtnLabel="Submit"
          />
        </Context.Provider>
        <RightPanel
          mapLoaded={false}
          route={null}
          showRoute={false}
        />
      </div>,
      "className": "app-body-container",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Context.Provider
            value={
              Object {
                "mapLoaded": false,
                "updateLocation": [Function],
              }
            }
          >
            <LeftPanel
              drop=""
              handleReset={[Function]}
              handleSubmit={[Function]}
              mapLoaded={false}
              message=""
              messageType=""
              resetDone={[Function]}
              resetPending={false}
              route={null}
              showRoute={false}
              start=""
              submitBtnLabel="Submit"
            />
          </Context.Provider>,
          <RightPanel
            mapLoaded={false}
            route={null}
            showRoute={false}
          />,
        ],
        "className": "row",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <LeftPanel
              drop=""
              handleReset={[Function]}
              handleSubmit={[Function]}
              mapLoaded={false}
              message=""
              messageType=""
              resetDone={[Function]}
              resetPending={false}
              route={null}
              showRoute={false}
              start=""
              submitBtnLabel="Submit"
            />,
            "value": Object {
              "mapLoaded": false,
              "updateLocation": [Function],
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "drop": "",
              "handleReset": [Function],
              "handleSubmit": [Function],
              "mapLoaded": false,
              "message": "",
              "messageType": "",
              "resetDone": [Function],
              "resetPending": false,
              "route": null,
              "showRoute": false,
              "start": "",
              "submitBtnLabel": "Submit",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": Object {
            "$$typeof": Symbol(react.provider),
            "_context": Object {
              "$$typeof": Symbol(react.context),
              "Consumer": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": [Circular],
              },
              "Provider": [Circular],
              "_calculateChangedBits": null,
              "_currentRenderer": Object {},
              "_currentRenderer2": null,
              "_currentValue": Object {
                "mapLoaded": false,
                "updateLocation": [Function],
              },
              "_currentValue2": Object {
                "mapLoaded": false,
                "updateLocation": [Function],
              },
              "_threadCount": 0,
            },
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "mapLoaded": false,
            "route": null,
            "showRoute": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="row"
        >
          <Context.Provider
            value={
              Object {
                "mapLoaded": false,
                "updateLocation": [Function],
              }
            }
          >
            <LeftPanel
              drop=""
              handleReset={[Function]}
              handleSubmit={[Function]}
              mapLoaded={false}
              message=""
              messageType=""
              resetDone={[Function]}
              resetPending={false}
              route={null}
              showRoute={false}
              start=""
              submitBtnLabel="Submit"
            />
          </Context.Provider>
          <RightPanel
            mapLoaded={false}
            route={null}
            showRoute={false}
          />
        </div>,
        "className": "app-body-container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Context.Provider
              value={
                Object {
                  "mapLoaded": false,
                  "updateLocation": [Function],
                }
              }
            >
              <LeftPanel
                drop=""
                handleReset={[Function]}
                handleSubmit={[Function]}
                mapLoaded={false}
                message=""
                messageType=""
                resetDone={[Function]}
                resetPending={false}
                route={null}
                showRoute={false}
                start=""
                submitBtnLabel="Submit"
              />
            </Context.Provider>,
            <RightPanel
              mapLoaded={false}
              route={null}
              showRoute={false}
            />,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <LeftPanel
                drop=""
                handleReset={[Function]}
                handleSubmit={[Function]}
                mapLoaded={false}
                message=""
                messageType=""
                resetDone={[Function]}
                resetPending={false}
                route={null}
                showRoute={false}
                start=""
                submitBtnLabel="Submit"
              />,
              "value": Object {
                "mapLoaded": false,
                "updateLocation": [Function],
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "drop": "",
                "handleReset": [Function],
                "handleSubmit": [Function],
                "mapLoaded": false,
                "message": "",
                "messageType": "",
                "resetDone": [Function],
                "resetPending": false,
                "route": null,
                "showRoute": false,
                "start": "",
                "submitBtnLabel": "Submit",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": Object {
              "$$typeof": Symbol(react.provider),
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": [Circular],
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": Object {
                  "mapLoaded": false,
                  "updateLocation": [Function],
                },
                "_currentValue2": Object {
                  "mapLoaded": false,
                  "updateLocation": [Function],
                },
                "_threadCount": 0,
              },
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "mapLoaded": false,
              "route": null,
              "showRoute": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
